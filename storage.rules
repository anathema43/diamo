rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        request.auth.token.admin == true;
    }
    
    // Helper function to validate file type
    function isValidImageType() {
      return request.resource.contentType.matches('image/(jpeg|jpg|png|webp)');
    }
    
    // Helper function to validate file size
    function isValidFileSize(maxSizeMB) {
      return request.resource.size < maxSizeMB * 1024 * 1024;
    }
    
    // Product images - readable by all, writable by admins only with strict validation
    match /products/{productId}/{allPaths=**} {
      allow read: if true;
      allow write: if isAdmin() && 
        isValidImageType() &&
        isValidFileSize(5); // 5MB limit
    }
    
    // User profile images - readable by all, writable by owner with restrictions
    match /users/{userId}/profile/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && 
        request.auth.uid == userId &&
        isValidImageType() &&
        isValidFileSize(2) && // 2MB limit
        fileName.matches('profile\\.(jpg|jpeg|png|webp)'); // Specific filename pattern
    }
    
    // Order attachments - readable/writable by order owner only
    match /orders/{userId}/{orderId}/{fileName} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId &&
        isValidFileSize(1) && // 1MB limit for order attachments
        fileName.matches('[a-zA-Z0-9_-]+\\.(jpg|jpeg|png|pdf)'); // Limited file types
    }
    
    // Admin uploads - admin only with size limits and validation
    match /admin/{category}/{fileName} {
      allow read, write: if isAdmin() &&
        isValidFileSize(10) && // 10MB limit for admin files
        (isValidImageType() || request.resource.contentType == 'application/pdf');
    }
    
    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}